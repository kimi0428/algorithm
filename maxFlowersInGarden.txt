 wall, flower, matrix找到能看见最多flower的点，地里高频题 给一个two D garden , 每一个slot可以是flower或者Wall. 找一个合适的位置，让游客可以看到最多的flower.可以站在flower上，不能站在墙上。。
如果被墙挡了，就看不到墙后面的花。然后游客只能竖直或者水瓶看，不能看对角线。。比如
[ [f, x, x, w, f],
  [f, f, x, x , x],
  [x,x, f, w, f],
  [f, f, x, w, x]]
这样，{3, 0} 和 {1,4}都能看到四朵花。

void maxFlowersInGarden(const vector<vector<char>>& matrix) {
    int m = matrix.size();
    if(m == 0) return ;
    int n = matrix[0].size();
    if(n == 0) return;
    
    vector<vector<int>> res(m, vector<int>(n, 0));
    for(int i = 0; i < m; ++i) {
        int count = 0;
        int start = 0;
        int j = 0;
        while(j < n) {
            if(matrix[i][j] == 'f') {
                count++;
            } else if (matrix[i][j] == 'w') {
                for(int k = start; k < j; ++k) {
                    res[i][k] = count;
                }
                start = j + 1;
                count = 0;
            }
            j++;
        }
        for(int k = start; k < j; ++k) {
            res[i][k] = count;
        }
    }
    for(int i = 0; i < n; ++i) {
        int count = 0;
        int start = 0;
        int j = 0;
        while(j < m) {
            if(matrix[j][i] == 'f') {
                count++;
            } else if (matrix[j][i] == 'w') {
                for(int k = start; k < j; ++k) {
                    res[k][i] += count;
                }
                start = j + 1;
                count = 0;
            }
            j++;
        }
        for(int k = start; k < j; ++k) {
            res[k][i] += count;
        }
    }
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] == 'f') {
                res[i][j] -= 1;
            }
        }
    }
    int v = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            v = max(v, res[i][j]);
        }
    }
    cout << v << endl;
}
