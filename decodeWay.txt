void helper(vector<string>& res, const string& source, int pos, string& s, unordered_map<int , char>& hash) {
    if(pos == source.size()) {
        res.push_back(s);
        return ;
    }
    int val = 0;
    for(int i = pos; i < source.size(); ++i) {
        val = val * 10 + source[i] - '0';
        if(val == 0 || (val % 10 == 0 && val / 10 > 2) || hash.find(val) == hash.end()) {
            return;
        }
        s += hash[val];
        helper(res, source, i + 1, s, hash);
        s.pop_back();
    }
}


vector<string> func(const string& source, unordered_map<int , char>& hash) {
    vector<string> res;
    string s = "";
    helper(res, source, 0, s, hash);
    return res;
}


public int numDecodings(String s) {
        if (s == null || s.length() == 0) return 0;
        if (s.charAt(0) == '0') return 0;
        List<List<String>> dp = new ArrayList<List<String>>();
        for (int i = 0; i < s.length()+1; i++) dp.add(new ArrayList<String>());
        dp.get(0).add("");
        dp.get(1).add(""+(char)('A'+(s.charAt(0)-'0')));
        for (int i = 2; i < dp.size(); i++) {
            int a = s.charAt(i-1) - '0';
            int b = (s.charAt(i-2)-'0') * 10 + a;
            if (a != 0) {
                char c = (char)('A' + a);
                for (String ss : dp.get(i-1)) {
                    dp.get(i).add(ss+c);
                }
            }
            if (b >= 10 && b <=26) {
                char c = (char)('A' + b);
                for (String ss : dp.get(i-2)) {
                    dp.get(i).add(ss+c);
                }
            }
        }
        return dp.get(s.length()).size();
    }