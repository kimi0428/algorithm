有一堆player，每个人beat 其他人的概率已知。然后已知初始的对阵表，问给定一个player，问他最后夺冠的概率是多少。
           ——
     ——          --
a——b   c—d    e—f  g—h

输入的format你自己决定。楼主当时真心也不知道啥好做法，很想用tree，但觉得用tree吧，从leaf node开始遍历到root 又很奇怪，而且很难找到一个node 的siblings。所以给了一个暴力解法，最后被证明是exponential memory usage。code也不是很好写，而且有些case也没处理。基本idea就是列出所有的对阵可能性，然后每一个可能性都有一个probability，最后结果相加。有点类似bfs。


unordered_map<int, double> calculate(playerNode* node, vector<vector<double>>& matrix) {
    if(!node->left && !node->right) {
        return {{node->player, 1.0}};
    }
    unordered_map<int, double> left = calculate(node->left, matrix);
    unordered_map<int, double> right = calculate(node->right, matrix);
    unordered_map<int, double> res;
    for(auto& l : left) {
        for(auto& r : right) {
                res[l.first] += l.second * r.second * matrix[l.first][r.first];
                res[r.first] += l.second * r.second * matrix[r.first][l.first];
        }
    }
    return res;
}


int main() {
    playerNode* root = new playerNode();
    playerNode* l1 = new playerNode();
    playerNode* r1 = new playerNode();
    playerNode* l2 = new playerNode();
    playerNode* r2 = new playerNode();
    
    playerNode* l3 = new playerNode();
    playerNode* r4 = new playerNode();
    
    l2->player = 0;
    r2->player = 1;
    l3->player = 2;
    r4->player = 3;
    root->left = l1;
    root->right = r1;
    l1->left = l2;
    l1->right = r2;
    r1->left = l3;
    r1->right = r4;
    
    vector<vector<double>> matrix(4, vector<double>(4, 0.0));
    matrix[0][1] = 0.8;
    matrix[0][2] = 0.7;
    matrix[0][3] = 0.6;
    
    matrix[1][0] = 0.2;
    matrix[1][2] = 0.4;
    matrix[1][3] = 0.3;
    
    matrix[2][0] = 0.3;
    matrix[2][1] = 0.6;
    matrix[2][3] = 0.6;
    
    matrix[3][0] = 0.4;
    matrix[3][1] = 0.7;
    matrix[3][2] = 0.4;
    
    for (auto& p : calculate(root, matrix)) {
        cout << p.first << " " << p.second <<endl;
    }
}

